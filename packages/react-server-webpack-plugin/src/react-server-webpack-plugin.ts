import {resolve, join} from 'path';
import {Compiler, Plugin} from 'webpack';
import VirtualModulesPlugin from 'webpack-virtual-modules';

interface Options {
  basePath: string;
  assetPrefix?: string;
  host?: string;
  port?: number;
}

enum Entrypoint {
  Client = 'client',
  Server = 'server',
}

/**
 * A webpack plugin that generates default server and client entrypoints if none are present.
 * @param config
 * @returns a customized webpack plugin
 */
export class ReactServerPlugin {
  private options: Options;

  constructor({
    host,
    port,
    assetPrefix,
    basePath = '.',
  }: Partial<Options> = {}) {
    this.options = {
      basePath,
      host,
      port,
      assetPrefix,
    };
  }

  apply(compiler: Compiler) {
    const modules = this.modules(compiler);
    const virtualModules = (new VirtualModulesPlugin(modules) as any) as Plugin;
    virtualModules.apply(compiler);
  }

  private modules(compiler: Compiler) {
    const {port, host, assetPrefix, basePath} = this.options;
    const modules: Record<string, string> = {};

    if (noSourceExists(basePath, Entrypoint.Client, compiler)) {
      modules[`${join(basePath, Entrypoint.Client)}.js`] = `
          // Generated by @shopify/react-server-webpack-plugin
          import React from 'react';
          import ReactDOM from 'react-dom';
          import {showPage} from '@shopify/react-html';
          import App from './index';

          const appContainer = document.getElementById('app');

          ReactDOM.hydrate(React.createElement(App), appContainer);
          showPage();
        `;
    }

    if (noSourceExists(basePath, Entrypoint.Server, compiler)) {
      modules[`${join(basePath, Entrypoint.Server)}.js`] = `
          // Generated by @shopify/react-server-webpack-plugin
          import 'isomorphic-fetch';
          import React from 'react';
          import {createServer} from '@shopify/react-server';
          import App from './index';
          const render = (ctx) =>
            React.createElement(App, {
              server: true,
              locale: ctx.locale,
              location: ctx.request.url,
            });

          const app = createServer({
            port: ${port ? port : 'process.env.REACT_SERVER_PORT || 8081'},
            ip: ${
              host ? `'${host}'` : 'process.env.REACT_SERVER_IP || "localhost"'
            },
            assetPrefix: '${
              assetPrefix
                ? assetPrefix
                : 'process.env.CDN_URL || "localhost:8080/assets/webpack"'
            }',
            render,
          });
          export default app;
        `;
    }

    return modules;
  }
}

function noSourceExists(
  path: string,
  entry: Entrypoint,
  {inputFileSystem, options: {context = ''}}: Compiler,
) {
  const resolvedPath = resolve(context, path);
  const filenameRegex = new RegExp(`^${entry}.[jt]sx?$`);

  return (
    // readdirSync is not on the type for this
    (inputFileSystem as any)
      .readdirSync(resolvedPath)
      .find(file => filenameRegex.test(file)) == null
  );
}
