import {join, resolve} from 'path';
import {existsSync} from 'fs-extra';
import {Compiler} from 'webpack';
import VirtualModulesPlugin from 'webpack-virtual-modules';
import glob from 'glob';

interface Options {
  basePath: string;
  assetPrefix?: string;
  host?: string;
  port?: number;
  rails?: boolean;
}

enum Entrypoint {
  Client = 'client',
  Server = 'server',
}

export const HEADER = `
  // Generated by @shopify/react-server-webpack-plugin
`;

/**
 * A webpack plugin that generates default server and client entrypoints if none are present.
 * @param config
 * @returns a customized webpack plugin
 */
export class ReactServerPlugin {
  private options: Options;

  constructor({
    host,
    port,
    assetPrefix,
    basePath = '.',
    rails = true,
  }: Partial<Options> = {}) {
    this.options = {
      basePath,
      host,
      port,
      assetPrefix,
      rails,
    };
  }

  apply(compiler: Compiler) {
    const modules = this.modules(compiler);
    const virtualModules = new VirtualModulesPlugin(modules);
    (virtualModules as any).apply(compiler);
  }

  private modules(compiler: Compiler) {
    const {basePath} = this.options;
    const modules: Record<string, string> = {};

    if (noSourceExists(Entrypoint.Client, this.options, compiler)) {
      const file = join(basePath, `${Entrypoint.Client}.js`);
      modules[file] = clientSource();
    }

    if (noSourceExists(Entrypoint.Server, this.options, compiler)) {
      const file = join(basePath, `${Entrypoint.Server}.js`);
      modules[file] = serverSource(this.options);
    }

    return modules;
  }
}

function serverSource(options: Options) {
  const {port, host, assetPrefix} = options;
  const serverPort = port ? port : 'process.env.REACT_SERVER_PORT || 8081';

  const serverIp = host
    ? JSON.stringify(host)
    : 'process.env.REACT_SERVER_IP || "localhost"';

  const serverAssetPrefix = assetPrefix
    ? JSON.stringify(assetPrefix)
    : 'process.env.CDN_URL || "localhost:8080/assets/webpack"';

  return `
    ${HEADER}
    import React from 'react';
    import {createServer} from '@shopify/react-server';
    import App from 'index';

    const render = (ctx) =>
    React.createElement(App, {
      server: true,
      location: ctx.request.url,
    });

    const app = createServer({
      port: ${serverPort},
      ip: ${serverIp},
      assetPrefix: ${serverAssetPrefix},
      render,
    });
    export default app;
  `;
}

function clientSource() {
  return `
    ${HEADER}
    import React from 'react';
    import ReactDOM from 'react-dom';
    import {showPage} from '@shopify/react-html';
    import App from 'index';

    const appContainer = document.getElementById('app');
    ReactDOM.hydrate(React.createElement(App), appContainer);
    showPage();
  `;
}

function noSourceExists(
  entry: Entrypoint,
  options: Options,
  {options: {context = ''}}: Compiler,
) {
  const {basePath: path, rails} = options;
  const basePath = resolve(context, path);

  if (!rails && existsSync(`${basePath}/${entry}`)) {
    // In node, we assume the user knows what they're doing if the folder exists
    return false;
  }

  const dirFiles = glob.sync(`${basePath}/${entry}.{ts,js,tsx,jsx}`);
  return dirFiles.length === 0;
}
