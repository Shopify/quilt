import {resolve, join} from 'path';
import {existsSync, mkdir} from 'fs-extra';
import {Compiler, Plugin} from 'webpack';
import VirtualModulesPlugin from 'webpack-virtual-modules';

interface Options {
  basePath: string;
  assetPrefix?: string;
  host?: string;
  port?: number;
  rails?: boolean;
}

enum Section {
  App = 'app',
}

enum Entrypoint {
  Client = 'client',
  Server = 'server',
}

export const HEADER = `
  // Generated by @shopify/react-server-webpack-plugin
`;

/**
 * A webpack plugin that generates default server and client entrypoints if none are present.
 * @param config
 * @returns a customized webpack plugin
 */
export class ReactServerPlugin {
  private options: Options;

  constructor({
    host,
    port,
    assetPrefix,
    basePath = '.',
    rails = true,
  }: Partial<Options> = {}) {
    this.options = {
      basePath,
      host,
      port,
      assetPrefix,
      rails,
    };
  }

  apply(compiler: Compiler) {
    const modules = this.modules(compiler);
    const virtualModules = (new VirtualModulesPlugin(modules) as any) as Plugin;
    virtualModules.apply(compiler);
  }

  private modules(compiler: Compiler) {
    const {basePath, rails} = this.options;
    const modules: Record<string, string> = {};

    if (!rails && this.noSourceExists(Section.App, compiler)) {
      modules[`${join(basePath, Section.App, 'index')}.js`] = appSource();
    }

    if (this.noSourceExists(Entrypoint.Client, compiler)) {
      const file = join(basePath, Entrypoint.Client, rails ? '' : 'index');
      modules[`${file}.js`] = this.clientSource();
    }

    if (this.noSourceExists(Entrypoint.Server, compiler)) {
      const file = join(basePath, Entrypoint.Server, rails ? '' : 'index');
      modules[`${file}.js`] = this.serverSource();
    }

    return modules;
  }

  private serverSource() {
    const {rails, port, host, assetPrefix} = this.options;
    const appImport = rails ? "'./index'" : "'../app'";
    const serverPort = port ? port : 'process.env.REACT_SERVER_PORT || 8081';

    const serverIp = host
      ? `'${host}'`
      : 'process.env.REACT_SERVER_IP || "localhost"';

    const serverAssetPrefix = assetPrefix
      ? assetPrefix
      : 'process.env.CDN_URL || "localhost:8080/assets/webpack"';

    return `
      ${HEADER}
      import 'isomorphic-fetch';
      import React from 'react';
      import {createServer} from '@shopify/react-server';
      import App from ${appImport};
      const render = (ctx) =>
      React.createElement(App, {
        server: true,
        location: ctx.request.url,
      });
      
      const app = createServer({
        port: ${serverPort},
        ip: ${serverIp},
        assetPrefix: '${serverAssetPrefix}',
        render,
      });
      export default app;
    `;
  }

  private clientSource() {
    const appImport = this.options.rails ? "'./index'" : "'../app'";

    return `
      ${HEADER}
      import React from 'react';
      import ReactDOM from 'react-dom';
      import {showPage} from '@shopify/react-html';
      import App from ${appImport};
  
      const appContainer = document.getElementById('app');
      ReactDOM.hydrate(React.createElement(App), appContainer);
      showPage();
    `;
  }

  private noSourceExists(
    entry: Entrypoint | Section,
    {inputFileSystem, options: {context = ''}}: Compiler,
  ) {
    const {basePath: path, rails} = this.options;
    const basePath = resolve(context, path);
    const resolvedPath = rails ? `${basePath}` : `${basePath}/${entry}`;

    if (!rails) {
      if (!existsSync(resolvedPath)) {
        // In node projects, if /client, /server or /app dirs dont exist, create them so VirtualModulesPlugin can resolve the modules paths
        mkdir(resolvedPath);
        return true;
      }
    }

    const matcher = rails ? entry : 'index';
    const filenameRegex = new RegExp(`^${matcher}.[jt]sx?$`);

    const dirFiles = (inputFileSystem as any).readdirSync(resolvedPath);
    const exists = dirFiles.find(file => filenameRegex.test(file)) == null;
    return exists;
  }
}

function appSource() {
  return `
    ${HEADER}
    import React from 'react';  
    export default function App() {
      return React.createElement(
        'p', 
        {}, 
        "This is a boilerplate component provided by @shopify/react-server. To get started with a real component, export a component from './app/index.{js,ts}"
      );
    }
  `;
}
